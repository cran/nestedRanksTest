
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "nestedRanksTest"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('nestedRanksTest')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("nestedRanksTest")
> ### * nestedRanksTest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nestedRanksTest
> ### Title: Mann-Whitney-Wilcoxon ranks test when data are in groups.
> ### Aliases: nestedRanksTest nestedRanksTest.default
> ###   nestedRanksTest.formula
> ### Keywords: htest nonparametric
> 
> ### ** Examples
> 
> require(graphics)
> 
> data(woodpecker_multiyear)
> 
> ## S3 method for class 'formula'
> 
> ## n.iter set to 1000 to shorten completion time
> 
> ## group in formula
> nestedRanksTest(Distance ~ Year | Granary, n.iter = 1000,
+                 data = woodpecker_multiyear,
+                 subset = Species == "agrifolia")

	Nested Ranks Test

data:  Distance by Year grouped by Granary
Z = 0.27695, p-value = 0.001
alternative hypothesis: Z lies above bootstrapped null values
null values:
     0%      1%      5%     10%     25%     50%     75%     90%     95%     99% 
-0.2249 -0.1394 -0.1050 -0.0855 -0.0384  0.0031  0.0536  0.0970  0.1249  0.1623 
   100% 
 0.2770 

bootstrap iterations: 1000 
group weights:
        10         31        140        151        152        938        942 
0.05204461 0.04646840 0.02478315 0.14560099 0.30359356 0.29120198 0.13630731 
> ## group in 'groups='
> nestedRanksTest(Distance ~ Year, groups = Granary, n.iter = 1000,
+                 data = woodpecker_multiyear,
+                 subset = Species == "lobata")

	Nested Ranks Test

data:  Distance by Year grouped by Granary
Z = 0.080882, p-value = 0.065
alternative hypothesis: Z lies above bootstrapped null values
null values:
     0%      1%      5%     10%     25%     50%     75%     90%     95%     99% 
-0.1750 -0.1184 -0.0854 -0.0685 -0.0331  0.0011  0.0360  0.0663  0.0897  0.1177 
   100% 
 0.1706 

bootstrap iterations: 1000 
group weights:
         9         10         33         39         48        107        163 
0.09705882 0.26250000 0.09926471 0.14411765 0.01985294 0.08235294 0.08823529 
       532        912 
0.07279412 0.13382353 
> 
> ## Default S3 method
> 
> dat.a <- subset(woodpecker_multiyear, Species == "agrifolia")
> ## arguments in default order
> nestedRanksTest(dat.a$Year, dat.a$Distance, dat.a$Granary, n.iter = 1000)

	Nested Ranks Test

data:  dat.a$Distance by dat.a$Year grouped by dat.a$Granary
Z = 0.27695, p-value = 0.001
alternative hypothesis: Z lies above bootstrapped null values
null values:
     0%      1%      5%     10%     25%     50%     75%     90%     95%     99% 
-0.2069 -0.1462 -0.1109 -0.0877 -0.0497 -0.0031  0.0450  0.0840  0.1075  0.1605 
   100% 
 0.2770 

bootstrap iterations: 1000 
group weights:
        10         31        140        151        152        938        942 
0.05204461 0.04646840 0.02478315 0.14560099 0.30359356 0.29120198 0.13630731 
> ## named arguments used in 'formula' order
> res <- with(subset(woodpecker_multiyear, Species == "lobata"),
+            nestedRanksTest(y = Distance, x = Year, groups = Granary,
+                            n.iter = 1000))
> plot(res)
> 
> 
> 
> cleanEx()
> nameEx("plot.htest_boot")
> ### * plot.htest_boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.htest_boot
> ### Title: Diagnostic plot of result held in 'htest_boot' object
> ### Aliases: plot.htest_boot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> require(graphics)
> 
> data(woodpecker_multiyear)
> 
> ## n.iter set to 1000 to shorten completion time
> res.a <- nestedRanksTest(Distance ~ Year | Granary, n.iter = 1000,
+                          data = woodpecker_multiyear,
+                          subset = Species == "agrifolia")
> res.l <- nestedRanksTest(Distance ~ Year | Granary, n.iter = 1000,
+                          data = woodpecker_multiyear,
+                          subset = Species == "lobata")
> 
> opa = par(mfrow = c(2, 1))
> ## Defaults
> plot(res.l)
> ## Modify colours, line type and main title
> plot(res.a, main = "Quercus agrifolia", col = "lightgreen",
+      p.col = "brown4", p.lty = 1)
> par(opa)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("print.htest_boot")
> ### * print.htest_boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.htest_boot
> ### Title: Print result held in 'htest_boot' object
> ### Aliases: print.htest_boot
> 
> ### ** Examples
> 
> data(woodpecker_multiyear)
> ## n.iter set to 1000 to shorten completion time
> res <- nestedRanksTest(Distance ~ Year | Granary, n.iter = 1000,
+                        data = woodpecker_multiyear,
+                        subset = Species == "agrifolia")
> class(res)
[1] "htest_boot" "htest"     
> print(res)

	Nested Ranks Test

data:  Distance by Year grouped by Granary
Z = 0.27695, p-value = 0.001
alternative hypothesis: Z lies above bootstrapped null values
null values:
     0%      1%      5%     10%     25%     50%     75%     90%     95%     99% 
-0.2249 -0.1394 -0.1050 -0.0855 -0.0384  0.0031  0.0536  0.0970  0.1249  0.1623 
   100% 
 0.2770 

bootstrap iterations: 1000 
group weights:
        10         31        140        151        152        938        942 
0.05204461 0.04646840 0.02478315 0.14560099 0.30359356 0.29120198 0.13630731 
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.175 0.02 4.198 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
